{"version":3,"sources":["App.js","index.js"],"names":["App","canvas","document","getElementById","ctx","getContext","img","Image","src","flight","flyHeight","currentScore","pipes","gamePlaying","size","cTenth","width","index","bestScore","pipeWidth","pipeGap","pipeLoc","Math","random","height","setup","Array","fill","map","a","i","onload","render","drawImage","pipe","max","slice","length","console","log","every","elem","floor","min","fillText","font","innerHTML","window","requestAnimationFrame","addEventListener","onclick","className","id","Component","bridge","send","ReactDOM"],"mappings":"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","file":"static/js/main.86ce7028.chunk.js","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport { View, ScreenSpinner, AdaptivityProvider, AppRoot, ConfigProvider, SplitLayout, SplitCol } from '@vkontakte/vkui';\r\n// import '@vkontakte/vkui/dist/vkui.css';\r\n\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount(){\r\n\t\tconst canvas = document.getElementById('canvas');\r\n\t\tconst ctx = canvas.getContext('2d');\r\n\t\tconst img = new Image();\r\n\t\timg.src = \"https://i.ibb.co/Q9yv5Jk/flappy-bird-set.png\";\r\n\r\n// general settings\r\n\t\tlet gamePlaying = false;\r\n\t\tconst gravity = .5;\r\n\t\tconst speed = 6.2;\r\n\t\tconst size = [51, 36];\r\n\t\tconst jump = -11.5;\r\n\t\tconst cTenth = (canvas.width / 10);\r\n\r\n\t\tlet index = 0,\r\n\t\t\tbestScore = 0,\r\n\t\t\tflight,\r\n\t\t\tflyHeight,\r\n\t\t\tcurrentScore,\r\n\t\t\tpipe,\r\n\t\t\tpipes;\r\n\r\n// pipe settings\r\n\t\tconst pipeWidth = 78;\r\n\t\tconst pipeGap = 270;\r\n\t\tconst pipeLoc = () => (Math.random() * ((canvas.height - (pipeGap + pipeWidth)) - pipeWidth)) + pipeWidth;\r\n\r\n\t\tconst setup = () => {\r\n\t\t\tcurrentScore = 0;\r\n\t\t\tflight = jump;\r\n\r\n\t\t\t// set initial flyHeight (middle of screen - size of the bird)\r\n\t\t\tflyHeight = (canvas.height / 2) - (size[1] / 2);\r\n\r\n\t\t\t// setup first 3 pipes\r\n\t\t\tpipes = Array(3).fill().map((a, i) => [canvas.width + (i * (pipeGap + pipeWidth)), pipeLoc()]);\r\n\t\t}\r\n\r\n\t\tconst render = () => {\r\n\t\t\t// make the pipe and bird moving\r\n\t\t\tindex++;\r\n\r\n\t\t\t// ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\t\t// background first part\r\n\t\t\tctx.drawImage(img, 0, 0, canvas.width, canvas.height, -((index * (speed / 2)) % canvas.width) + canvas.width, 0, canvas.width, canvas.height);\r\n\t\t\t// background second part\r\n\t\t\tctx.drawImage(img, 0, 0, canvas.width, canvas.height, -(index * (speed / 2)) % canvas.width, 0, canvas.width, canvas.height);\r\n\r\n\t\t\t// pipe display\r\n\t\t\tif (gamePlaying){\r\n\t\t\t\tpipes.map(pipe => {\r\n\t\t\t\t\t// pipe moving\r\n\t\t\t\t\tpipe[0] -= speed;\r\n\r\n\t\t\t\t\t// top pipe\r\n\t\t\t\t\tctx.drawImage(img, 432, 588 - pipe[1], pipeWidth, pipe[1], pipe[0], 0, pipeWidth, pipe[1]);\r\n\t\t\t\t\t// bottom pipe\r\n\t\t\t\t\tctx.drawImage(img, 432 + pipeWidth, 108, pipeWidth, canvas.height - pipe[1] + pipeGap, pipe[0], pipe[1] + pipeGap, pipeWidth, canvas.height - pipe[1] + pipeGap);\r\n\r\n\t\t\t\t\t// give 1 point & create new pipe\r\n\t\t\t\t\tif(pipe[0] <= -pipeWidth){\r\n\t\t\t\t\t\tcurrentScore++;\r\n\t\t\t\t\t\t// check if it's the best score\r\n\t\t\t\t\t\tbestScore = Math.max(bestScore, currentScore);\r\n\r\n\t\t\t\t\t\t// remove & create new pipe\r\n\t\t\t\t\t\tpipes = [...pipes.slice(1), [pipes[pipes.length-1][0] + pipeGap + pipeWidth, pipeLoc()]];\r\n\t\t\t\t\t\tconsole.log(pipes);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// if hit the pipe, end\r\n\t\t\t\t\tif ([\r\n\t\t\t\t\t\tpipe[0] <= cTenth + size[0],\r\n\t\t\t\t\t\tpipe[0] + pipeWidth >= cTenth,\r\n\t\t\t\t\t\tpipe[1] > flyHeight || pipe[1] + pipeGap < flyHeight + size[1]\r\n\t\t\t\t\t].every(elem => elem)) {\r\n\t\t\t\t\t\tgamePlaying = false;\r\n\t\t\t\t\t\tsetup();\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t// draw bird\r\n\t\t\tif (gamePlaying) {\r\n\t\t\t\tctx.drawImage(img, 432, Math.floor((index % 9) / 3) * size[1], ...size, cTenth, flyHeight, ...size);\r\n\t\t\t\tflight += gravity;\r\n\t\t\t\tflyHeight = Math.min(flyHeight + flight, canvas.height - size[1]);\r\n\t\t\t} else {\r\n\t\t\t\tctx.drawImage(img, 432, Math.floor((index % 9) / 3) * size[1], ...size, ((canvas.width / 2) - size[0] / 2), flyHeight, ...size);\r\n\t\t\t\tflyHeight = (canvas.height / 2) - (size[1] / 2);\r\n\t\t\t\t// text accueil\r\n\t\t\t\tctx.fillText(`Best score : ${bestScore}`, 85, 245);\r\n\t\t\t\tctx.fillText('Click to play', 90, 535);\r\n\t\t\t\tctx.font = \"bold 30px courier\";\r\n\t\t\t}\r\n\r\n\t\t\tdocument.getElementById('bestScore').innerHTML = `Best : ${bestScore}`;\r\n\t\t\tdocument.getElementById('currentScore').innerHTML = `Current : ${currentScore}`;\r\n\r\n\t\t\t// tell the browser to perform anim\r\n\t\t\twindow.requestAnimationFrame(render);\r\n\t\t}\r\n\r\n// launch setup\r\n\t\tsetup();\r\n\t\timg.onload = render;\r\n\r\n// start game\r\n\t\tdocument.addEventListener('click', () => gamePlaying = true);\r\n\t\twindow.onclick = () => flight = jump;\r\n\r\n\t\tconsole.log(gamePlaying)\r\n\t}\r\n\r\nrender() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<header>\r\n\t\t\t\t<h1>Floppy Bird</h1>\r\n\t\t\t\t<div className=\"score-container\">\r\n\t\t\t\t\t<div id=\"bestScore\"></div>\r\n\t\t\t\t\t<div id=\"currentScore\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\r\n\t\t\t<canvas id=\"canvas\" width=\"431\" height=\"768\"></canvas>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport App from \"./App\";\r\nimport './css/index.css';\r\n\r\n// Init VK  Mini App\r\nbridge.send(\"VKWebAppInit\");\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\r\n}\r\n"],"sourceRoot":""}